from http.server import BaseHTTPRequestHandler, HTTPServer
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from urllib.parse import urlparse, parse_qs
import sqlite3
import base64
import json
import jwt
import datetime

hostName = "localhost"
serverPort = 8080
db_name = 'totally_not_my_privateKeys.db'

# Initialize database and create table if it doesn't exist
def initialize_db():
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS keys(
                        kid INTEGER PRIMARY KEY AUTOINCREMENT,
                        key BLOB NOT NULL,
                        exp INTEGER NOT NULL
                     )''')
    conn.commit()
    conn.close()

# Store a PEM-encoded private key in the database with an expiration timestamp
def store_key_in_db(pem_data, exp_timestamp):
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO keys (key, exp) VALUES (?, ?)', (pem_data, exp_timestamp))
    conn.commit()
    conn.close()

# Retrieve a valid (unexpired) or expired key from the database
def get_key_from_db(expired=False):
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    now = int(datetime.datetime.utcnow().timestamp())
    if expired:
        cursor.execute('SELECT key FROM keys WHERE exp <= ? LIMIT 1', (now,))
    else:
        cursor.execute('SELECT key FROM keys WHERE exp > ? LIMIT 1', (now,))
    row = cursor.fetchone()
    conn.close()
    return row[0] if row else None

# Retrieve all valid keys (unexpired) for the JWKS endpoint
def get_all_valid_keys():
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    now = int(datetime.datetime.utcnow().timestamp())
    cursor.execute('SELECT key FROM keys WHERE exp > ?', (now,))
    rows = cursor.fetchall()
    conn.close()
    return rows

# Convert an integer to a Base64URL-encoded string
def int_to_base64(value):
    value_hex = format(value, 'x')
    if len(value_hex) % 2 == 1:
        value_hex = '0' + value_hex
    value_bytes = bytes.fromhex(value_hex)
    encoded = base64.urlsafe_b64encode(value_bytes).rstrip(b'=')
    return encoded.decode('utf-8')

class MyServer(BaseHTTPRequestHandler):
    def do_PUT(self):
        self.send_response(405)
        self.end_headers()
        return

    def do_PATCH(self):
        self.send_response(405)
        self.end_headers()
        return

    def do_DELETE(self):
        self.send_response(405)
        self.end_headers()
        return

    def do_HEAD(self):
        self.send_response(405)
        self.end_headers()
        return

    def do_POST(self):
        parsed_path = urlparse(self.path)
        params = parse_qs(parsed_path.query)
        if parsed_path.path == "/auth":
            if 'expired' in params:
                pem = get_key_from_db(expired=True)
                kid = "expiredKID"
            else:
                pem = get_key_from_db(expired=False)
                kid = "goodKID"

            if pem:
                token_payload = {
                    "user": "username",
                    "exp": datetime.datetime.utcnow() + datetime.timedelta(hours=1)
                }
                headers = {"kid": kid}
                encoded_jwt = jwt.encode(token_payload, pem, algorithm="RS256", headers=headers)
                self.send_response(200)
                self.end_headers()
                self.wfile.write(bytes(encoded_jwt, "utf-8"))
            else:
                self.send_response(500)
                self.end_headers()
            return

        self.send_response(405)
        self.end_headers()
        return

    def do_GET(self):
        if self.path == "/.well-known/jwks.json":
            keys = get_all_valid_keys()
            jwks_keys = []
            for key_pem in keys:
                private_key = serialization.load_pem_private_key(
                    key_pem[0].encode(),
                    password=None,
                )
                public_numbers = private_key.public_key().public_numbers()
                jwks_keys.append({
                    "alg": "RS256",
                    "kty": "RSA",
                    "use": "sig",
                    "kid": "goodKID",
                    "n": int_to_base64(public_numbers.n),
                    "e": int_to_base64(public_numbers.e),
                })
            self.send_response(200)
            self.send_header("Content-type", "application/json")
            self.end_headers()
            self.wfile.write(bytes(json.dumps({"keys": jwks_keys}), "utf-8"))
            return

        self.send_response(405)
        self.end_headers()
        return

if __name__ == "__main__":
    initialize_db()

    # Generate initial private keys with different expiration times and store in DB
    private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    expired_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)

    pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption()
    )
    expired_pem = expired_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption()
    )

    # Store valid and expired keys in the database
    store_key_in_db(pem, int((datetime.datetime.utcnow() + datetime.timedelta(hours=1)).timestamp()))
    store_key_in_db(expired_pem, int((datetime.datetime.utcnow() - datetime.timedelta(hours=1)).timestamp()))

    webServer = HTTPServer((hostName, serverPort), MyServer)
    try:
        webServer.serve_forever()
    except KeyboardInterrupt:
        pass

    webServer.server_close()
